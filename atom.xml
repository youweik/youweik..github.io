<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有为的博客</title>
  
  <subtitle>非技术性扯淡博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longyouwei.com/"/>
  <updated>2021-01-27T03:17:14.797Z</updated>
  <id>http://longyouwei.com/</id>
  
  <author>
    <name>有为</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春暖花开总会来</title>
    <link href="http://longyouwei.com/2020/03/06/%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80%E6%80%BB%E4%BC%9A%E6%9D%A5/"/>
    <id>http://longyouwei.com/2020/03/06/春暖花开总会来/</id>
    <published>2020-03-06T14:00:05.000Z</published>
    <updated>2021-01-27T03:17:14.797Z</updated>
    
    <content type="html"><![CDATA[<p>我讨厌老鼠，因为在我的印象中，鼠年总会有不好的事情发生。<br>1996年，农历鼠年。一场大水冲掉了我的家园。我们一家老小流离失所。<br>2008年，农历鼠年。南方冰灾，阻断了亿万国人回家的路。汶川地震，震碎了无数人的家庭。<br>2020年，农历鼠年。一种极其微小的病毒。让十四亿中国人过了一个最难忘的春节。让本来是欢乐祥和的节日变得死气沉沉。让中国快速发展的经济停了下来。</p><p>也许，许多年后我们还会记得2020年，记得那个春节。<br>那年春节，我们足不出户，没有走亲访友。<br>那年春节，我们忧心忡忡，一面为国，一面为家。<br>那年春节，武汉封城。</p><p>其实对于近几百年来由病毒引发的疫情来说，这次疫情并不严重。天花病毒，鼠疫，流感病毒，每个都夺取了上千万的生命，每个都让地球生灵涂炭。人类的进化史，其实就是我们的免疫系统与病毒的抗争史。这些病毒使我们的免疫系统更加全面，使我们的科技更加发达。</p><p>我想这次疫情其实还有好的一面。<br>它让快速发展的中国，停下来开始思考自己走过的路。我们在大力发展经济的同时，是否丢掉了什么东西。曾经的青山绿水变成了秃山污水，曾经的民风淳朴变成了金钱势利。那些无数人童年的记忆，我们又要花多少钱才能换回来。<br>它让中国人开始思考，那些值得全民追捧的到底是网红戏子，还是医生教师科学家。那些以牺牲健康为代价换来的短期利益，到底值不值得。<br>它给了我们一个超长的假期，让我们有足够的时间陪陪自己父母和亲人。以前太忙碌，总是没时间。这次有很多时间来陪他们一起吃个团圆饭，一起喝一杯小酒，一起回忆年少时的岁月，一起说说工作和学习。</p><p>经济暂时停了，可以继续发展。<br>工作没了，可以去找。<br>钱没了，可以去挣。<br>但是有些东西一旦失去了，就再也回不来。</p><p>昨天是我老妈的生日，我在晚上打电话给她时。脑子突然一惊，我妈已经58岁，只差两年就迈入花甲！去年的一次手术让她的身体变得没以前那么健康。以前她对我既严厉又慈爱，现在只有慈爱了。这次疫情期间，我上班后她每天都打电话叮嘱我一定要注意身体。我以前总是说过等我有时间了一定带着她和老爸一起去旅行，一起去看看祖国的大好河山。她总是说没必要浪费这钱，你们身体健康才是最好的。这次疫情过后，我一定会兑现承诺的。</p><p>好吧，瞎写就写到这儿。</p><p>待春暖花开，山河无恙，我们取下口罩一起狂欢可好。武汉加油，中国加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我讨厌老鼠，因为在我的印象中，鼠年总会有不好的事情发生。&lt;br&gt;1996年，农历鼠年。一场大水冲掉了我的家园。我们一家老小流离失所。&lt;br&gt;2008年，农历鼠年。南方冰灾，阻断了亿万国人回家的路。汶川地震，震碎了无数人的家庭。&lt;br&gt;2020年，农历鼠年。一种极其微小的病毒
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片懒加载</title>
    <link href="http://longyouwei.com/2018/12/09/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://longyouwei.com/2018/12/09/图片懒加载/</id>
    <published>2018-12-08T17:12:09.000Z</published>
    <updated>2021-01-27T03:17:14.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>图片懒加载是指在web应用中，让图片这种耗流量的资源只在网页可视区域显示出来，只有在用户滑动到相应的其他区域时，再加载其他图片。比如淘宝首页，页面内容非常的多，图片可能有成百上千张，但是大部分用户只会浏览到第一屏显示的图片，而页面其他图片就没有必要显示出来了。因为这种亿万级别的网站，省流量就是省钱。<br><a id="more"></a></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>将所有图片页面上面所有图片的真实地址指定到<code>data-src</code>属性中，<code>src</code>统一写为一张加载中的动画图片地址</li><li>监控页面的滚动行为，在每次滚动的时候遍历图片的dom，计算图片的位置是否在网页的可视区域，如果存在的话，就将图片的<code>src</code>替换为<code>data-src</code></li><li>由于页面滚动计算是高耗资源的操作，可以在滚动的时候加上<a href="https://www.lodashjs.com/docs/4.17.5.html#throttle" target="_blank" rel="noopener">throttle</a></li></ol><h3 id="下面具体实现"><a href="#下面具体实现" class="headerlink" title="下面具体实现"></a>下面具体实现</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>准备一下dom结构：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://i.loli.net/2018/12/09/5c0bfcc33d7f8.png&quot; data-src=&quot;https://i.loli.net/2018/11/23/5bf75ff39e0a4.jpg&quot; /&gt;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p></p><p>实现如下脚本：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> images = queryImage()</span><br><span class="line">  <span class="keyword">const</span> windowHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line">  images.forEach(<span class="function"><span class="params">image</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rect = image.getBoundingClientRect()</span><br><span class="line">    <span class="keyword">if</span> (rect.top &gt; <span class="number">0</span> &amp;&amp; rect.top &lt; windowHeight &amp;&amp; image.getAttribute(<span class="string">'data-src'</span>)) &#123;</span><br><span class="line">      image.src = image.getAttribute(<span class="string">'data-src'</span>)</span><br><span class="line">      image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        image.removeAttribute(<span class="string">'data-src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        image.src = <span class="string">'http://iph.href.lu/100x100?text=img%20error&amp;fg=E74C3C'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里使用了lodash的throttle，其实可以自己实现，代码也就那么几行</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, _.throttle(scrollFn, <span class="number">200</span>))</span><br><span class="line">scrollFn()</span><br></pre></td></tr></table></figure><p></p><p>查看效果<a href="https://jsfiddle.net/youweiks/zqa28sn0/" target="_blank" rel="noopener">demo</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/zqa28sn0/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>该方法只是在实现图片是否在页面显示区域的逻辑上用了最新的API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noopener">IntersectionObserver</a><br>具体代码如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryImage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.img'</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">changes</span> =&gt;</span> &#123;</span><br><span class="line">  changes.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> intersectionRect = item.intersectionRect</span><br><span class="line">    <span class="keyword">const</span> img = item.target</span><br><span class="line">    <span class="keyword">if</span> (intersectionRect.height * intersectionRect.width &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      img.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">        observer.unobserve(img)</span><br><span class="line">        img.removeAttribute(<span class="string">'height'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      img.addEventListener(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">        img.src = <span class="string">'http://iph.href.lu/100x100?text=img%20error&amp;fg=E74C3C'</span></span><br><span class="line">        observer.unobserve(img)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">/* 假装模拟1s */</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> src = img.getAttribute(<span class="string">'data-src'</span>)</span><br><span class="line">      img.src = src</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">queryImage().forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">  observer.observe(img)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>查看效果<a href="https://jsfiddle.net/youweiks/0jz2m4yq/" target="_blank" rel="noopener">demo</a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0jz2m4yq/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe></p><h4 id="两种方法对比"><a href="#两种方法对比" class="headerlink" title="两种方法对比"></a>两种方法对比</h4><ul><li>方法1思路清晰，比较容易理解，兼容性比较好，但是如果是横向滚动的页面就需要另外计算显示逻辑了</li><li>方法2为浏览器自带原生API在性能上好，唯一的缺点就是兼容性不行，但是可以通过<a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill" target="_blank" rel="noopener">polyfill</a>来实现</li><li>具体怎么选择就看你了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;图片懒加载是指在web应用中，让图片这种耗流量的资源只在网页可视区域显示出来，只有在用户滑动到相应的其他区域时，再加载其他图片。比如淘宝首页，页面内容非常的多，图片可能有成百上千张，但是大部分用户只会浏览到第一屏显示的图片，而页面其他图片就没有必要显示出来了。因为这种亿万级别的网站，省流量就是省钱。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js将base64编码的文件保存为本地图片</title>
    <link href="http://longyouwei.com/2018/04/11/js%E5%B0%86base64%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E4%B8%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>http://longyouwei.com/2018/04/11/js将base64编码的文件保存为本地图片/</id>
    <published>2018-04-11T08:24:57.000Z</published>
    <updated>2021-01-27T03:17:14.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近项目有个需求，需要将后台返回的base64格式的图片文件导出到本地（即点击下载）</p><p>开始以为很简单，用a标签的download属性就行了，后来还是出现了很多兼容性问题，不得不重新考虑</p><p>但是有一次在看到echarts的demo的时候，它的右上角有个导出按钮（这个功能的兼容性很好），于是决定把其代码扣出来</p><p><img src="https://i.loli.net/2018/11/24/5bf8b5e2ed15f.jpg?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="1543026080(1)"></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAsImg</span>(<span class="params">fileName, url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// from echarts</span></span><br><span class="line">  <span class="comment">// https://github.com/apache/incubator-echarts/blob/master/src/component/toolbox/feature/SaveAsImage.js</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  a.download = fileName</span><br><span class="line">  a.href = url</span><br><span class="line">  <span class="keyword">const</span> ua = navigator.userAgent</span><br><span class="line">  <span class="comment">// IE 11 Trident/7.0; rv:11.0</span></span><br><span class="line">  <span class="keyword">const</span> isIE = ua.match(<span class="regexp">/MSIE\s([\d.]+)/</span>) || ua.match(<span class="regexp">/Trident\/.+?rv:(([\d.]+))/</span>)</span><br><span class="line">  <span class="keyword">const</span> isEdge = ua.match(<span class="regexp">/Edge\/([\d.]+)/</span>)</span><br><span class="line">  <span class="comment">// firefox || chrome</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> MouseEvent === <span class="string">'function'</span> &amp;&amp; !isIE &amp;&amp; !isEdge) &#123;</span><br><span class="line">    <span class="keyword">var</span> evt = <span class="keyword">new</span> MouseEvent(<span class="string">'click'</span>, &#123;</span><br><span class="line">      view: <span class="built_in">window</span>,</span><br><span class="line">      bubbles: <span class="literal">true</span>,</span><br><span class="line">      cancelable: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    a.dispatchEvent(evt)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">      <span class="keyword">var</span> bstr = atob(url.split(<span class="string">','</span>)[<span class="number">1</span>])</span><br><span class="line">      <span class="keyword">var</span> n = bstr.length</span><br><span class="line">      <span class="keyword">var</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line">      <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([u8arr])</span><br><span class="line">      <span class="built_in">window</span>.navigator.msSaveOrOpenBlob(blob, fileName)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> html = <span class="string">''</span> +</span><br><span class="line">          <span class="string">'&lt;body style="margin:0;"&gt;'</span> +</span><br><span class="line">          <span class="string">'&lt;img src="'</span> + url + <span class="string">'" style="max-width:100%;" title="'</span> + fileName + <span class="string">'" /&gt;'</span> +</span><br><span class="line">          <span class="string">'&lt;/body&gt;'</span></span><br><span class="line">      <span class="keyword">var</span> tab = <span class="built_in">window</span>.open()</span><br><span class="line">      tab.document.write(html)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，如有错误，欢迎指正</p><p><strong>参考资料</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding" target="_blank" rel="noopener">atob</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent" target="_blank" rel="noopener">MouseEvent</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;&lt;p&gt;最近项目有个需求，需要将后台返回的base64格式的图片文件导出到本地（即点击下载）&lt;/p&gt;&lt;p&gt;开始以为很简单，用a标签的download属性就行了，后来还是出现了很多兼容性问题，不得不重新考虑&lt;/p&gt;&lt;p&gt;但是有一次在看到echarts的demo的时候，它的右上
      
    
    </summary>
    
    
      <category term="js" scheme="http://longyouwei.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js将数组的顺序打乱</title>
    <link href="http://longyouwei.com/2017/11/30/js%E5%B0%86%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%89%93%E4%B9%B1/"/>
    <id>http://longyouwei.com/2017/11/30/js将数组的顺序打乱/</id>
    <published>2017-11-30T06:53:48.000Z</published>
    <updated>2021-01-27T03:17:14.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近在网上看到一道面试题，<strong><em>如何将一个数组更高效的打乱它的顺序</em></strong>，无聊之时拿来测试了一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成原数组</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100000</span>).fill(<span class="literal">null</span>).map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100000</span>).fill(<span class="literal">null</span>).map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 方法1：</span></span><br><span class="line"><span class="keyword">const</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function"><span class="params">_</span> =&gt;</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2：</span></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">var</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">var</span> itemAtIndex = arr[randomIndex]</span><br><span class="line">    arr[randomIndex] = arr[i]</span><br><span class="line">    arr[i] = itemAtIndex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'fn1'</span>)</span><br><span class="line"><span class="keyword">var</span> result1 = fn1(arr1)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'fn1'</span>)</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'fn2'</span>)</span><br><span class="line"><span class="keyword">var</span> result2 = fn2(arr2)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'fn2'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result1)</span><br><span class="line"><span class="built_in">console</span>.log(result2)</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果如下：<br><img src="https://i.loli.net/2018/11/24/5bf8b730f214e.jpg?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="1543025476(1)"></p><p>个人感觉，方法2更加靠谱一些，虽然方法1看起来简洁，原因如下：</p><ul><li>不管如何测试方法2耗时更短（在chrome上面）</li><li>方法2感觉打乱的更加彻底</li><li>V8在处理sort时，并不是完全随机（网上指出来的，本人没有研究，<a href="https://github.com/v8/v8/blob/master/src/js/array.js" target="_blank" rel="noopener">参考V8链接</a>）</li></ul><p>在网上搜索一下，果真在<em>知乎</em>上面有人在讨论：<a href="https://www.zhihu.com/question/68330851" target="_blank" rel="noopener">查看链接</a></p><p>如有不同看法，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;&lt;p&gt;最近在网上看到一道面试题，&lt;strong&gt;&lt;em&gt;如何将一个数组更高效的打乱它的顺序&lt;/em&gt;&lt;/strong&gt;，无聊之时拿来测试了一下：&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 生成原数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;).fill(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;).map(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;value, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;).fill(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;).map(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;value, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方法1：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fn1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; - &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方法2：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fn2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = arr.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; randomIndex = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; itemAtIndex = arr[randomIndex]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[randomIndex] = arr[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[i] = itemAtIndex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 测试：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;fn1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result1 = fn1(arr1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;fn1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;fn2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result2 = fn2(arr2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;fn2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://longyouwei.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>在vue2.x和webpack2.x中使用eslint</title>
    <link href="http://longyouwei.com/2017/08/09/%E5%9C%A8vue2-x%E5%92%8Cwebpack2-x%E4%B8%AD%E4%BD%BF%E7%94%A8eslint/"/>
    <id>http://longyouwei.com/2017/08/09/在vue2-x和webpack2-x中使用eslint/</id>
    <published>2017-08-09T09:16:18.000Z</published>
    <updated>2021-01-27T03:17:14.797Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="全局安装-eslint"><a href="#全局安装-eslint" class="headerlink" title="全局安装 eslint"></a>全局安装 eslint</h3><p><code>npm install eslint -g</code></p><h3 id="在项目根目录运行如下指令"><a href="#在项目根目录运行如下指令" class="headerlink" title="在项目根目录运行如下指令"></a>在项目根目录运行如下指令</h3><p><code>eslint --init</code></p><p>依次选择[use a popular style guide]–[standard]–[json]</p><p>这时项目根目录会出现一个<code>.eslint.json</code>的文件夹，编辑里面的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"html"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"space-before-function-paren"</span>: [<span class="number">1</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="attr">"no-unneeded-ternary"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"semi"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="attr">"eol-last"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"quotes"</span>: [<span class="number">2</span>, <span class="string">"single"</span>],</span><br><span class="line">    <span class="attr">"no-underscore-dangle"</span>: [<span class="number">0</span>],</span><br><span class="line">    <span class="attr">"linebreak-style"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"consistent-return"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"global-require"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"comma-dangle"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中里面的内容可以自己配置，详见<a href="http://eslint.cn/" target="_blank" rel="noopener">eslint 中文</a>和<a href="http://eslint.org/" target="_blank" rel="noopener">eslint 英文</a><br>安装几个 package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader eslint-loader eslint-plugin-html --save-dev</span><br></pre></td></tr></table></figure><p>其中<code>eslint-plugin-html</code>是支持 eslint 校验<code>.vue</code>文件的</p><h3 id="在webpack-config-js文件中将-vue-的-loader-修改为如下："><a href="#在webpack-config-js文件中将-vue-的-loader-修改为如下：" class="headerlink" title="在webpack.config.js文件中将 vue 的 loader 修改为如下："></a>在<code>webpack.config.js</code>文件中将 vue 的 loader 修改为如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  enforce: <span class="string">'pre'</span>,</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      scss: <span class="string">'vue-style-loader!css-loader!postcss-loader!sass-loader'</span>,</span><br><span class="line">      sass: <span class="string">'vue-style-loader!css-loader!postcss-loader!sass-loader'</span> <span class="comment">// ?indentedSyntax</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Tips: eslint 校验比较严格，对代码不规范的人来说可能是噩梦，但是我们还是&gt;要忍受一下，将我们那些代码不规范的毛病去掉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;&lt;h3 id=&quot;全局安装-eslint&quot;&gt;&lt;a href=&quot;#全局安装-eslint&quot; class=&quot;headerlink&quot; title=&quot;全局安装 eslint&quot;&gt;&lt;/a&gt;全局安装 eslint&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install eslint -g&lt;/c
      
    
    </summary>
    
    
      <category term="js" scheme="http://longyouwei.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="http://longyouwei.com/2017/04/25/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://longyouwei.com/2017/04/25/hexo-github搭建个人博客/</id>
    <published>2017-04-25T15:21:36.000Z</published>
    <updated>2021-01-27T03:17:14.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概序"><a href="#1-概序" class="headerlink" title="1.概序"></a>1.概序</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p><ul><li>该教程默许你有基本的计算机基础知识</li><li>该教程默许你会基本的markdowm语法，如果还不熟悉，不要着急，<a href="http://www.jianshu.com/p/q81RER/" target="_blank" rel="noopener">赶快去看一下吧</a></li></ul><p>该教程一些词汇如下<br><code>站点配置文件</code>：你博客目录下面的<code>_config.yml</code>文件<br><code>主题配置文件</code>：你博客目录下面的主题文件夹中的<code>_config.yml</code>文件，例如我的就是<code>/blog/themes/next/_config.yml</code></p><hr><h3 id="2-必要的准备条件"><a href="#2-必要的准备条件" class="headerlink" title="2.必要的准备条件"></a>2.必要的准备条件</h3><ul><li>你的pc上面必须安装了node.js和git</li><li>一个github账号</li><li>一个独立的个人域名（如果自己需要解析到自己的域名上面的话）</li><li>你需要有一个合适的文本编辑器，推荐使用<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">sublime text</a>，轻量级，界面美观，插件丰富<a id="more"></a></li></ul><hr><h3 id="3-安装node-js和git"><a href="#3-安装node-js和git" class="headerlink" title="3.安装node.js和git"></a>3.安装node.js和git</h3><p>去node的<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>下载LTS长期稳定版本<br>去git的官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a><br>一步一步安装，直到出现以下就代表安装成功了：<br><img src="http://upload-images.jianshu.io/upload_images/5320146-060ab5d08242324f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd"></p><hr><h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h3><h4 id="4-1全局安装hexo"><a href="#4-1全局安装hexo" class="headerlink" title="4.1全局安装hexo"></a>4.1全局安装hexo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果出现以下界面，证明hexo安装成功了<br><img src="http://upload-images.jianshu.io/upload_images/5320146-a849e190826ffd05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo"></p><h4 id="4-2新建博客"><a href="#4-2新建博客" class="headerlink" title="4.2新建博客"></a>4.2新建博客</h4><p>在自己电脑合适的地方新建一个文件夹（以我的电脑<code>f:\hexo</code>文件为例），cd到该目录输入以下<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p></p><p>这段代码可能需要那么几分钟，不要着急，毕竟我大天朝有中国特色的防火墙。<br>安装完成之后cd到blog目录，输入以下命令：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure><p></p><p>打开浏览器输入: <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a>（如果直接输入<code>hexo server</code>,就是默认的4000端口），看到如下界面就代表安装成功了<br><img src="http://upload-images.jianshu.io/upload_images/5320146-f66d6f24f7ba34e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="4-3新建一篇文章吧"><a href="#4-3新建一篇文章吧" class="headerlink" title="4.3新建一篇文章吧"></a>4.3新建一篇文章吧</h4><p>在终端输入以下指令<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 你好世界</span><br></pre></td></tr></table></figure><p></p><p>这时，你的blog目录下的<code>/source/_post/</code> 文件夹会出现一个<code>你好世界.md</code>的文件，用你喜欢的文本编辑器编辑，保存，然后刷新浏览器，看看效果吧<br><img src="http://upload-images.jianshu.io/upload_images/5320146-2c2998b497d5fd28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="http://upload-images.jianshu.io/upload_images/5320146-f5ad40fe5aa9cea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="http://upload-images.jianshu.io/upload_images/5320146-e098a3c0ab010a06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><h3 id="5-安装一个合适的主题（非必要）"><a href="#5-安装一个合适的主题（非必要）" class="headerlink" title="5.安装一个合适的主题（非必要）"></a>5.安装一个合适的主题（非必要）</h3><p>博客虽然跑起来了，但是不符合天朝的审美观，现在我们就可以安装一个合适的主题，毕竟逼格也是很重要的。我们以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next 主题</a>为例<br>在博客目录运行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>这个操作可能要下载几分钟，这里忍不住要吐槽我大天朝的防火墙。下载完成之后，编辑<code>站点配置文件</code>。搜索‘theme’，将theme改为next</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>修改完之后，重启服务（在终端按ctrl+C,然后运行hexo server指令），刷新浏览器，看看效果吧<br><img src="http://upload-images.jianshu.io/upload_images/5320146-bb37d7c5e531683d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><h3 id="6-关联Hexo与github-page"><a href="#6-关联Hexo与github-page" class="headerlink" title="6.关联Hexo与github page"></a>6.关联Hexo与github page</h3><h4 id="6-1新建一个github代码仓库"><a href="#6-1新建一个github代码仓库" class="headerlink" title="6.1新建一个github代码仓库"></a>6.1新建一个github代码仓库</h4><p>在你的github界面新建一个名称为yourname.github.io的repo<br><img src="http://upload-images.jianshu.io/upload_images/5320146-ea2d2fcd8de9035e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><em>注意：比如我的github名称是test，这里你就填 test.github.io；如果你的名字是test1，那你就填 test1.github.io</em></p><h4 id="6-3配置git和ssh和密钥"><a href="#6-3配置git和ssh和密钥" class="headerlink" title="6.3配置git和ssh和密钥"></a>6.3配置git和ssh和密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;yourname@email.com&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</span><br></pre></td></tr></table></figure><p>具体教程可以查看<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399" target="_blank" rel="noopener">一些教程</a></p><h4 id="6-4关联github"><a href="#6-4关联github" class="headerlink" title="6.4关联github"></a>6.4关联github</h4><p>编辑<code>站点配置文件</code>找到Deployment，做以下修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git # 输入你的github地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p></p><h4 id="6-4发布到github"><a href="#6-4发布到github" class="headerlink" title="6.4发布到github"></a>6.4发布到github</h4><p>先安装一个扩展插件插件<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p></p><p>然后运行以下指令<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p></p><p>发布成功之后，访问你的地址：yourname.github.io吧</p><hr><h3 id="7-添加解析到自己域名"><a href="#7-添加解析到自己域名" class="headerlink" title="7.添加解析到自己域名"></a>7.添加解析到自己域名</h3><p>在你的yourname.github.io项目中配置如下<br><img src="http://upload-images.jianshu.io/upload_images/5320146-21348d9f580b490c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="http://upload-images.jianshu.io/upload_images/5320146-e6668ccddd227f16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在你购买域名服务商的后台添加几条解析记录，以阿里云为例<br><img src="http://upload-images.jianshu.io/upload_images/5320146-abb1c8b31bfb3dd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="http://upload-images.jianshu.io/upload_images/5320146-299e8d9035599b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>如果不出意外的话，过几分钟，直接访问你的域名地址就可以正常访问了</p><hr><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h3><h4 id="如果在npm-install中出现安装非常慢的情况，建议使用淘宝的cnpm"><a href="#如果在npm-install中出现安装非常慢的情况，建议使用淘宝的cnpm" class="headerlink" title="如果在npm install中出现安装非常慢的情况，建议使用淘宝的cnpm"></a>如果在npm install中出现安装非常慢的情况，建议使用淘宝的cnpm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后使用<code>cnpm install</code>指令即可</p><h4 id="博客基本配置"><a href="#博客基本配置" class="headerlink" title="博客基本配置"></a>博客基本配置</h4><p>编辑<code>站点配置文件</code>，找到‘site’<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 博客标题</span><br><span class="line">subtitle: 博客副标题</span><br><span class="line">description: 自己的描述</span><br><span class="line">author: 作者名称</span><br><span class="line">language: zh-Hans # 网站语言</span><br><span class="line">timezone: Asia/Shanghai # 网站时区</span><br></pre></td></tr></table></figure><p></p><h4 id="增加打赏"><a href="#增加打赏" class="headerlink" title="增加打赏"></a>增加打赏</h4><p>编辑<code>主题配置文件</code>，找到‘reward_comment’<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /images/wechat.jpg</span><br><span class="line">alipay: /images/alipay.jpg</span><br></pre></td></tr></table></figure><p></p><p>然后将你的支护宝和微信的付款码图片放在主题目录的<code>/source/images/</code>文件夹下面</p><h4 id="增加评论系统"><a href="#增加评论系统" class="headerlink" title="增加评论系统"></a>增加评论系统</h4><p>现在有两个选择：<a href="http://dev.duoshuo.com/" target="_blank" rel="noopener">多说</a>，<a href="https://disqus.com" target="_blank" rel="noopener">Disqus</a>。由于多说即将关闭，为了博客的逼格，所以以Disqus为例<br>你要注册一个Disqus账号，拿到你disqus的disqus_shortname。然后编辑<code>主题配置文件</code>，找到’disqus_shortname’<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Disqus</span><br><span class="line">disqus_shortname: your_disqus_shortname</span><br><span class="line"># Hypercomments</span><br><span class="line">#hypercomments_id:</span><br></pre></td></tr></table></figure><p></p><p><strong>注意：有些next主题和本人版本不同，可能配置的选项有所不同，但是大部分都大同小异，大家可以多上网折腾以下</strong></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo 官方文档</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next 主题官网文档</a></li><li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">一些教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-概序&quot;&gt;&lt;a href=&quot;#1-概序&quot; class=&quot;headerlink&quot; title=&quot;1.概序&quot;&gt;&lt;/a&gt;1.概序&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页&lt;/p&gt;&lt;ul&gt;&lt;li&gt;该教程默许你有基本的计算机基础知识&lt;/li&gt;&lt;li&gt;该教程默许你会基本的markdowm语法，如果还不熟悉，不要着急，&lt;a href=&quot;http://www.jianshu.com/p/q81RER/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;赶快去看一下吧&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;该教程一些词汇如下&lt;br&gt;&lt;code&gt;站点配置文件&lt;/code&gt;：你博客目录下面的&lt;code&gt;_config.yml&lt;/code&gt;文件&lt;br&gt;&lt;code&gt;主题配置文件&lt;/code&gt;：你博客目录下面的主题文件夹中的&lt;code&gt;_config.yml&lt;/code&gt;文件，例如我的就是&lt;code&gt;/blog/themes/next/_config.yml&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&quot;2-必要的准备条件&quot;&gt;&lt;a href=&quot;#2-必要的准备条件&quot; class=&quot;headerlink&quot; title=&quot;2.必要的准备条件&quot;&gt;&lt;/a&gt;2.必要的准备条件&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;你的pc上面必须安装了node.js和git&lt;/li&gt;&lt;li&gt;一个github账号&lt;/li&gt;&lt;li&gt;一个独立的个人域名（如果自己需要解析到自己的域名上面的话）&lt;/li&gt;&lt;li&gt;你需要有一个合适的文本编辑器，推荐使用&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime text&lt;/a&gt;，轻量级，界面美观，插件丰富
    
    </summary>
    
    
      <category term="js" scheme="http://longyouwei.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js获取菲波那契数列的第N个元素</title>
    <link href="http://longyouwei.com/2017/03/25/js%E8%8E%B7%E5%8F%96%E8%8F%B2%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E7%AC%ACN%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
    <id>http://longyouwei.com/2017/03/25/js获取菲波那契数列的第N个元素/</id>
    <published>2017-03-24T17:31:15.000Z</published>
    <updated>2021-01-27T03:17:14.797Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概序"><a href="#概序" class="headerlink" title="概序"></a>概序</h4><p><a href="http://baike.baidu.com/link?url=ef8VHJvyil7_nseAEM0WAAakbHfNbNZdWGe3JftuwxsTFcsfbwdNzTB-Lhl2LOwdOV-M5ixzxMEWFRlfw9qWlwo51mmA8-moGCaaFgvP0NOxdVSspc95wfvUasv5_1EEAbrz_FAeT5fdeT-3P7c2Ea" target="_blank" rel="noopener">菲波那契数列</a>，大致可以描叙为a(n) = a(n-1) + a(n-2) (a &gt; 2)。类似于这样<code>[1, 1, 2, 3, 5, 8, 13 ...]</code>，下面我们用js来实现一下：</p><hr><h4 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> a(n - <span class="number">1</span>) + a(n - <span class="number">2</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a（44）'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="number">44</span>))</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'a（44）'</span>)</span><br></pre></td></tr></table></figure><p>以上我们可以比较清晰的看出代码的思路，但是这种方法有一个致命的缺点：效率太差！</p><p><img src="https://img.longyouwei.com/604467-20170114150610697-767833320.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20g54mI5p2D5omA5pyJ/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthWest/dx/10/dy/10" alt="604467-20170114150610697-767833320"></p><p>执行到第44个的时候，已经不能接受了。需要5s多。那我们再来改进一下:<br><a id="more"></a></p><h4 id="2-闭包-缓存"><a href="#2-闭包-缓存" class="headerlink" title="2.闭包+缓存"></a>2.闭包+缓存</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> cache = &#123;</span><br><span class="line">       <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (cache[n]) &#123;</span><br><span class="line">           <span class="keyword">return</span> cache[n]</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           cache[n - <span class="number">1</span>] = b(n - <span class="number">1</span>)</span><br><span class="line">           cache[n - <span class="number">2</span>] = b(n - <span class="number">2</span>)</span><br><span class="line">           <span class="keyword">return</span> cache[n - <span class="number">1</span>] + cache[n - <span class="number">2</span>]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'b（1200）'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b(<span class="number">1200</span>))</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'b（1200）'</span>)</span><br></pre></td></tr></table></figure><p>将每一步计算出来的值，保存到了缓存中。效率提升了许多：<br><img src="https://img.longyouwei.com/604467-20170114151042556-1772264773.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="604467-20170114151042556-1772264773"></p><h4 id="3-直接计算出该数列的值得数组，然后再从数组中取值"><a href="#3-直接计算出该数列的值得数组，然后再从数组中取值" class="headerlink" title="3.直接计算出该数列的值得数组，然后再从数组中取值"></a>3.直接计算出该数列的值得数组，然后再从数组中取值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">   <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i ++) &#123;</span><br><span class="line">       arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr[n - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'c（1200）'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c(<span class="number">1200</span>))</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'c（1200）'</span>)</span><br></pre></td></tr></table></figure><p>这样效率又进一步提高了不少：</p><p><img src="https://img.longyouwei.com/604467-20170114151353213-1988265003.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="604467-20170114151353213-1988265003"></p><h4 id="4-直接使用数学表达式"><a href="#4-直接使用数学表达式" class="headerlink" title="4.直接使用数学表达式"></a>4.直接使用数学表达式</h4><p>从网上得出菲波那契数列是有数学表达式的：<br><img src="https://img.longyouwei.com/604467-20170114151555010-1595503507.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="604467-20170114151555010-1595503507"><br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">1</span>/(<span class="built_in">Math</span>.pow(<span class="number">5</span>, <span class="number">1</span>/<span class="number">2</span>))) * (<span class="built_in">Math</span>.pow((<span class="number">1</span> + <span class="built_in">Math</span>.pow(<span class="number">5</span>, <span class="number">1</span>/<span class="number">2</span>))/<span class="number">2</span>, n) - <span class="built_in">Math</span>.pow((<span class="number">1</span> - <span class="built_in">Math</span>.pow(<span class="number">5</span>, <span class="number">1</span>/<span class="number">2</span>))/<span class="number">2</span>, n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'d（1200）'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(d(<span class="number">1200</span>))</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'d（1200）'</span>)</span><br></pre></td></tr></table></figure><p></p><p>现在我们来看一下效果：<br>![604467-20170114151947291-1309083018](<a href="https://img.longyouwei.com/604467-20170114151947291-1309083018.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" target="_blank" rel="noopener">https://img.longyouwei.com/604467-20170114151947291-1309083018.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20=/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10</a></p><h2><a href="#" class="headerlink" title=")"></a>)</h2><p>总结一下：以上方法都有利有弊，有人指出直接使用数学表达式会产生js计算精度问题，希望大家权衡考量，并且提出更好的建议。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概序&quot;&gt;&lt;a href=&quot;#概序&quot; class=&quot;headerlink&quot; title=&quot;概序&quot;&gt;&lt;/a&gt;概序&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=ef8VHJvyil7_nseAEM0WAAakbHfNbNZdWGe3JftuwxsTFcsfbwdNzTB-Lhl2LOwdOV-M5ixzxMEWFRlfw9qWlwo51mmA8-moGCaaFgvP0NOxdVSspc95wfvUasv5_1EEAbrz_FAeT5fdeT-3P7c2Ea&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菲波那契数列&lt;/a&gt;，大致可以描叙为a(n) = a(n-1) + a(n-2) (a &amp;gt; 2)。类似于这样&lt;code&gt;[1, 1, 2, 3, 5, 8, 13 ...]&lt;/code&gt;，下面我们用js来实现一下：&lt;/p&gt;&lt;hr&gt;&lt;h4 id=&quot;1-递归&quot;&gt;&lt;a href=&quot;#1-递归&quot; class=&quot;headerlink&quot; title=&quot;1.递归&quot;&gt;&lt;/a&gt;1.递归&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || n === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + a(n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;a（44）&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a(&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;a（44）&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上我们可以比较清晰的看出代码的思路，但是这种方法有一个致命的缺点：效率太差！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.longyouwei.com/604467-20170114150610697-767833320.png?imageView2/0/q/75|watermark/2/text/bG9uZ3lvdXdlaS5jb20g54mI5p2D5omA5pyJ/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthWest/dx/10/dy/10&quot; alt=&quot;604467-20170114150610697-767833320&quot;&gt;&lt;/p&gt;&lt;p&gt;执行到第44个的时候，已经不能接受了。需要5s多。那我们再来改进一下:&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://longyouwei.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="http://longyouwei.com/2016/07/25/Hello-world/"/>
    <id>http://longyouwei.com/2016/07/25/Hello-world/</id>
    <published>2016-07-24T17:03:41.000Z</published>
    <updated>2021-01-27T03:17:14.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我第一篇博客</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我很帅'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'深圳梁朝伟'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;这是我第一篇博客&lt;/p&gt;&lt;/blockquote&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="other" scheme="http://longyouwei.com/tags/other/"/>
    
  </entry>
  
</feed>
